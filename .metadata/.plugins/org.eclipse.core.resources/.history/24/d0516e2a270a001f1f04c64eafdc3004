package com.pbl3.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.sql.Timestamp;

import com.pbl3.libs.Pair;
import com.pbl3.model.CouponModel;
import com.pbl3.model.CourseModel;

public class CouponService extends BaseService{
	
    public static LinkedList<CouponModel> all() {
        LinkedList<CouponModel> couponModels = new LinkedList<>();
        try {
            Connection connection = getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM coupon WHERE status = 1 ORDER BY CouponID DESC;");
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                int couponID = resultSet.getInt(1);
                String code = resultSet.getString(2);
                Timestamp startDate = resultSet.getTimestamp(3);
                Timestamp endDate = resultSet.getTimestamp(4);
                int quantity = resultSet.getInt(5);
                int quantityUsed = resultSet.getInt(6);
                CouponModel couponModel = new CouponModel(couponID, code, startDate, endDate, quantity, quantityUsed);
                couponModels.add(couponModel);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return couponModels;
    }

    // Thêm một coupon vào cơ sở dữ liệu
    public static void add(CouponModel couponModel) {
        try {
            Connection connection = getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO coupon (Code, StartDate, EndDate, Quantity, QuantityUsed) VALUES (?, ?, ?, ?, ?)");
            preparedStatement.setString(1, couponModel.getCode());
            preparedStatement.setTimestamp(2, couponModel.getStartDate());
            preparedStatement.setTimestamp(3, couponModel.getEndDate());
            preparedStatement.setInt(4, couponModel.getQuantity());
            preparedStatement.setInt(5, couponModel.getQuantityUsed());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void delete(int couponID) {
        try {
            Connection connection = getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM coupon WHERE CouponID = ?");
            preparedStatement.setInt(1, couponID);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void edit(CouponModel couponModel) {
        try {
            Connection connection = getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement("UPDATE coupon SET Code = ?, StartDate = ?, EndDate = ?, Quantity = ?, QuantityUsed = ? WHERE CouponID = ?");
            preparedStatement.setString(1, couponModel.getCode());
            preparedStatement.setTimestamp(2, couponModel.getStartDate());
            preparedStatement.setTimestamp(3, couponModel.getEndDate());
            preparedStatement.setInt(4, couponModel.getQuantity());
            preparedStatement.setInt(5, couponModel.getQuantityUsed());
            preparedStatement.setInt(6, couponModel.getCouponID());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static Pair<CouponModel, LinkedList<CourseModel>> find(int couponID) {
        CouponModel couponModel = new CouponModel();
        LinkedList<CourseModel> = new LinkedList<CourseModel>();
        Pair<CouponModel, LinkedList<CourseModel>> pair;
        try {
            Connection connection = getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement("");
            preparedStatement.setInt(1, couponID);
            ResultSet resultSet = preparedStatement.executeQuery();	
            if (resultSet.next()) {
            	couponModel.setCouponID(couponID);
                couponModel.setCode(resultSet.getString("Code"));
                couponModel.setStartDate(resultSet.getTimestamp("StartDate"));
                couponModel.setEndDate(resultSet.getTimestamp("EndDate"));
                couponModel.setQuantity(resultSet.getInt("Quantity"));
                couponModel.setQuantityUsed(resultSet.getInt("QuantityUsed"));
                pair.setFirst(couponModel);
            }
            while(resultSet.next()) {
            	CourseModel courseModel = new CourseModel();
                courseModel.setCourseID(resultSet.getInt("courseID"));
	            courseModel.setCourseName(resultSet.getString("courseName"));
	             
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return couponModel;
    }
}
