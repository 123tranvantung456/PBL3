package com.quyentv.service;

import java.sql.*;
import java.util.ArrayList;

import org.eclipse.jdt.internal.compiler.IDebugRequestor;

import com.quyentv.model.Student;

public class StudentService extends BaseService{
	// truy van all
	public static ArrayList<Student> all(){
		ArrayList<Student> students = new ArrayList<Student>();
		try {
			Connection connection = getConnection();
			Statement statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery("SELECT * FROM student");
			while(resultSet.next()) {
				int id = resultSet.getInt(1);
				String name = resultSet.getString(2);
				int gender = resultSet.getInt(3);
				String address = resultSet.getString(4);
				float score = resultSet.getFloat(5);
				Student student = new Student(id, name, gender, address, score);   
				students.add(student); 
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return students;
	};	
	// them
	public static void add(Student student) {
		try {
			Connection connection = getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO student (name, gender, address, score) VALUES (?, ?, ?, ?)"); 
			preparedStatement.setString(1, student.getName());
			preparedStatement.setInt(2, student.getGender());
			preparedStatement.setString(3, student.getAddress());
			preparedStatement.setFloat(4, student.getScore());
			preparedStatement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	// tim theo id
	public static Student find(int id) {
		Student student = new Student();
		try {
			Connection connection = getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM student WHERE id = ?"); 
			preparedStatement.setInt(1, id);
			ResultSet resultSet = preparedStatement.executeQuery();
			resultSet.next();
				int id1 = resultSet.getInt(1);
				String name = resultSet.getString(2);
				int gender = resultSet.getInt(3);
				String address = resultSet.getString(4);
				float score = resultSet.getFloat(5);
				student.setId(id1);
				student.setAddress(address);
				student.setGender(gender);
				student.setScore(score);
				student.setName(name);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return student;
	}
	// tim theo name
	public static ArrayList<Student> find (String key){
		ArrayList<Student> students = new ArrayList<Student>();
		try {
			Connection connection = getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM student WHERE name LIKE ? "); 
			preparedStatement.setString(1, "%" + key + "%");
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				int id = resultSet.getInt(1);
				String name = resultSet.getString(2);
				int gender = resultSet.getInt(3);
				String address = resultSet.getString(4);
				float score = resultSet.getFloat(5);
				Student student = new Student(id, name, gender, address, score);   
				students.add(student); 
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return students;
	}
	// phan trang
	public static ArrayList<Student> find (String key, int limit, int page){
		ArrayList<Student> students = new ArrayList<Student>();
		try {
			Connection connection = getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM student WHERE name LIKE ? ORDER BY Id DESC LIMIT ? OFFSET ?"); 
			preparedStatement.setString(1, "%" + key + "%");
			preparedStatement.setInt(2, limit);
			preparedStatement.setInt(3, (page - 1)*limit); // offset
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				int id = resultSet.getInt(1);
				String name = resultSet.getString(2);
				int gender = resultSet.getInt(3);
				String address = resultSet.getString(4);
				float score = resultSet.getFloat(5);
				Student student = new Student(id, name, gender, address, score);   
				students.add(student); 
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return students;
	}
	// sua
	public static void update(Student student) {
		try {
			Connection connection = getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("UPDATE student SET name = ?, gender= ?, address = ?, score = ? WHERE id =?"); 
			preparedStatement.setString(1, student.getName());
			preparedStatement.setInt(2, student.getGender());
			preparedStatement.setString(3, student.getAddress());
			preparedStatement.setFloat(4, student.getScore());
			preparedStatement.setInt(5, student.getId());
			preparedStatement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	// xoa
	public static void delete(int id) {
		try {
			Connection connection = getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM student WHERE id = ?"); 
			preparedStatement.setInt(1, id);
			preparedStatement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	// dem so ban ghi
	public static void count () {
		try {
			Connection connection = getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("SELECT COUNT(*) AS result FROM student"); 
			ResultSet resultSet = preparedStatement.executeQuery();
			resultSet.next(); 
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		ArrayList<Student> students = find("12");
		for (Student student : students) {
			System.out.println(student.getGender());
		}
//		Student student = StudentService.find(1);
//		System.out.println(student.getId());
//		System.out.println(student.getName());
//		System.out.println(student.getGender());
//		student.setGender(0);
//		StudentService.update(student);
	}
}


