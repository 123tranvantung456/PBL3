package com.pbl3.controller.teacher;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import com.pbl3.libs.FileData;
import com.pbl3.model.QuestionModel;
import com.pbl3.model.TestsModel;
import com.pbl3.model.TypeOneQuestionModel;
import com.pbl3.model.TypeTwoQuestionModel;
import com.pbl3.model.UserModel;
import com.pbl3.service.DataQuestionService;
import com.pbl3.service.PartService;
import com.pbl3.service.QuestionService;
import com.pbl3.service.TestsService;
import com.pbl3.service.TypeOneQuestionService;
import com.pbl3.service.TypeQuestionService;
import com.pbl3.service.TypeTwoQuestionService;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;

@MultipartConfig
@WebServlet(urlPatterns = { "/teacher/question", "/teacher/question/create", "/teacher/question/edit",
		"/teacher/question/delete"})
public class QuestionController extends HttpServlet {
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String actionString = req.getServletPath();
		System.out.println("actionString tai do get la: " + actionString);
		switch (actionString) {
		case "/teacher/question": {
			System.out.println("goi case /teacher/question - dogest");
			show(req, resp);
			break;
		}
		}
	}

	protected void show(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		int testsID = Integer.parseInt(req.getParameter("testsID"));
		System.out.println("testsID can truy van cac cau hoi la: " + testsID);
		QuestionModel[] questionModels = new QuestionModel[200];
		for (int i = 0; i < 200; i++) {
			if(i <= 30) {
				questionModels[i] = new TypeOneQuestionModel();
			}
			else {
				questionModels[i] = new TypeTwoQuestionModel();
			}
		}
		TypeOneQuestionService.allTypeOneQuestion(testsID, questionModels);
		TypeTwoQuestionService.allTypeTwoQuestion(testsID, questionModels);
		int first = 0, last = 0;
		for (int i = 3; i <= 7; i++) {
		 if (i == 3) {
			first = 32;
			last = 70;
		} else if (i == 4) {
			first = 71;
			last = 100;
		}  else if (i == 6) {
			first = 131;
			last = 146;
		} else if (i == 7) {
			first = 147;
			last = 200;
		}
			if (i == 5) continue;
			req.setAttribute("dataQuestionModels" + i ,DataQuestionService.all(testsID, i));
		}
		RequestDispatcher requestDispatcher = req.getRequestDispatcher("/views/teacher/tests/question.jsp");
		int totalPart = PartService.count();
		req.setAttribute("totalPart", totalPart);
		for (int i = 1; i <= totalPart; i++) {
			req.setAttribute("typeQuestionModels" + i, TypeQuestionService.all(i));
		}
		req.setAttribute("questionModels", questionModels);
		requestDispatcher.forward(req, resp);
		}

	protected void create(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		Integer typeQuestionID = Integer.parseInt(req.getParameter("typeQuestionID"));
		Integer testsID = Integer.parseInt(req.getParameter("testsID"));
		String answerCorrect = req.getParameter("answerCorrect");
		String answerExplain = req.getParameter("answerExplain");
		int orderNumber = Integer.parseInt(req.getParameter("orderNumber"));
		Integer dataQuestionID = null;
		if (req.getParameter("dataQuestionID") != null) {
			dataQuestionID = Integer.parseInt(req.getParameter("dataQuestionID")); 
		} 
		// lay part anh ve 
		Part part = req.getPart("image"); 
		String image = null;
		// neu co form-group img (kh phai part 2, 5) 
		if (part != null) { 
			System.out.println("part != null vi ko phai them o part 2 va 5");
			String realPart = req.getServletContext().getRealPath("/data");
			image = FileData.add(part, realPart); // tra ve null neu co form-group img nhung ko tai len  
	 	}
		
		if (orderNumber >= 1 && orderNumber <= 31) {
			// lay part audio ve 
			Part partAudio = req.getPart("audio"); 
			String audio = null;
			// neu co form-group audio (kh phai phan doc) 
			if (partAudio != null) { 
			System.out.println("partAudio != null");
			String realPart = req.getServletContext().getRealPath("/data");
			audio = FileData.add(partAudio, realPart); // tra ve null neu co form-group audio nhung ko tai len  
	 		}
			
			String transcript = req.getParameter("transcript");
			TypeOneQuestionModel typeOneQuestionModel = new TypeOneQuestionModel(0, typeQuestionID, testsID, answerCorrect, answerExplain, orderNumber, image, null, dataQuestionID, null, audio, transcript) ;
			int questionID = QuestionService.add(typeOneQuestionModel);
			typeOneQuestionModel.setQuestionID(questionID);
			TypeOneQuestionService.add(typeOneQuestionModel);
		} 
		
		else { 
			String questionContent = req.getParameter("questionContent");
			String contentAnswerA = req.getParameter("contentAnswerA");
			String contentAnswerB = req.getParameter("contentAnswerB");
			String contentAnswerC = req.getParameter("contentAnswerC");
			String ContentAnswerD = req.getParameter("contentAnswerD");
			TypeTwoQuestionModel typeTwoQuestionModel = new TypeTwoQuestionModel(0, typeQuestionID, testsID, answerCorrect, answerExplain, orderNumber, image, null, dataQuestionID, null, contentAnswerA, contentAnswerB, contentAnswerC, ContentAnswerD, questionContent);
			int questionID = QuestionService.add(typeTwoQuestionModel); 
			typeTwoQuestionModel.setQuestionID(questionID);     
			TypeTwoQuestionService.add(typeTwoQuestionModel);  
		}  
		resp.sendRedirect(req.getContextPath() + "/teacher/question?testsID=" + testsID);  
	}

	protected void edit(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		int questionID = Integer.parseInt(req.getParameter("questionID"));
		Integer typeQuestionID = Integer.parseInt(req.getParameter("typeQuestionID"));
		Integer testsID = Integer.parseInt(req.getParameter("testsID"));
		String answerCorrect = req.getParameter("answerCorrect");
		String answerExplain = req.getParameter("answerExplain");
		int orderNumber = Integer.parseInt(req.getParameter("orderNumber"));
		Integer dataQuestionID = null;
		if (req.getParameter("dataQuestionID") != null) {
			dataQuestionID = Integer.parseInt(req.getParameter("dataQuestionID")); 
		} 
		// lay part anh ve 
		Part part = req.getPart("image"); 
		String image = null;
		// neu co form-group img (kh phai part 2, 5) 
		if (part != null) { 
			System.out.println("part != null vi ko phai them o part 2 va 5");
			String realPart = req.getServletContext().getRealPath("/data");
			image = FileData.add(part, realPart); // tra ve null neu co form-group img nhung ko tai len  
	 	}

		if (orderNumber >= 1 && orderNumber <= 31) {
			// lay lai anh cu neu ko them gi
			if(image == null) {
				image = req.getParameter("imageString");
			}   
			// lay part audio ve 
			Part partAudio = req.getPart("audio"); 
			String audio = null;
			// neu co form-group audio (kh phai phan doc) 
			if (partAudio != null) { 
			System.out.println("partAudio != null");
			String realPart = req.getServletContext().getRealPath("/data");
			audio = FileData.add(partAudio, realPart); // tra ve null neu co form-group audio nhung ko tai len  
			if(audio == null) {
				audio = req.getParameter("audioString");
			}
			}     
			String transcript = req.getParameter("transcript");
			TypeOneQuestionModel typeOneQuestionModel = new TypeOneQuestionModel(questionID, typeQuestionID, testsID, answerCorrect, answerExplain, orderNumber, image, null, dataQuestionID, null, audio, transcript);
			QuestionService.edit(typeOneQuestionModel);  
			TypeOneQuestionService.edit(typeOneQuestionModel); 
		} 
		
		else {
			
		}
		
		resp.sendRedirect(req.getContextPath() + "/teacher/question?testsID=" + testsID);
	} 

	protected void delete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("Gọi hàm delete");
		// xóa ảnh củ đi cu ơi....
		
		int questionID = Integer.parseInt(req.getParameter("questionID"));
		int testsID = Integer.parseInt(req.getParameter("testsID"));
		System.out.println("questionID cần xóa là: " + req.getParameter("questionID"));
		QuestionService.delete(questionID);
		resp.sendRedirect(req.getContextPath() + "/teacher/question?testsID=" + testsID); 
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String actionString = req.getServletPath();
		System.out.println("actionString tai do post la: " + actionString);
		switch (actionString) {
		case "/teacher/question/create": {
			System.out.println("goi case /teacher/question/create - do post");
			create(req, resp);
			break;
		}
		case "/teacher/question/edit": {
			System.out.println("goi case /teacher/question/create - dogest");
			edit(req, resp);
			break;
		}
		case "/teacher/question/delete": {
			System.out.println("goi case /teacher/question/create - dogest");
			delete(req, resp);
			break;
		}
		}
	}
}
