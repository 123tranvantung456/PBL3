/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-04-12 17:57:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.student.vocab_002dlists.vocab;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.LinkedList;
import com.pbl3.model.VocabModel;

public final class review_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.pbl3.model.VocabModel");
    _jspx_imports_classes.add("java.util.LinkedList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Flashcard App</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        /* CSS styles */\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .flashcard {\r\n");
      out.write("            width: 200px;\r\n");
      out.write("            height: 150px;\r\n");
      out.write("            background-color: #f3f3f3;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            position: relative;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: transform 0.8s;\r\n");
      out.write("            transform-style: preserve-3d;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .flashcard:hover  {\r\n");
      out.write("            transform: rotateY(180deg);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .front,\r\n");
      out.write("        .back {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            backface-visibility: hidden;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .front {\r\n");
      out.write("            z-index: 2;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .back {\r\n");
      out.write("            transform: rotateY(180deg);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button {\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            background-color: #4caf50;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            color: white;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\" id=\"flashcardContainer\">\r\n");
      out.write("        <!-- Phần tử này chứa dữ liệu của các thẻ Flashcard, nhưng nó không hiển thị trên giao diện -->\r\n");
      out.write("        <div id=\"flashcardData\" style=\"display: none;\">\r\n");
      out.write("        ");
for(VocabModel v : (LinkedList<VocabModel>)request.getAttribute("vocabModels")){ 
      out.write("\r\n");
      out.write("            <div data-front=");
      out.print(v.getVocab() );
      out.write(" data-back=");
      out.print(v.getMean());
      out.write("> </div>\r\n");
      out.write("            ");
} 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Thẻ Flashcard sẽ được hiển thị ở đây -->\r\n");
      out.write("        <div class=\"flashcard\" id=\"flashcard\">\r\n");
      out.write("            <div class=\"front\">Front Text</div>\r\n");
      out.write("            <div class=\"back\">Back Text</div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Nút để chuyển sang thẻ Flashcard tiếp theo -->\r\n");
      out.write("        <button id=\"nextBtn\">Next Card</button>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        // Lấy các phần tử cần thiết từ HTML\r\n");
      out.write("        const flashcardContainer = document.getElementById('flashcardContainer');\r\n");
      out.write("        const flashcardDataContainer = document.getElementById('flashcardData');\r\n");
      out.write("        const flashcard = document.getElementById('flashcard');\r\n");
      out.write("        const nextBtn = document.getElementById('nextBtn');\r\n");
      out.write("\r\n");
      out.write("        // Biến để theo dõi thẻ flashcard hiện tại\r\n");
      out.write("        let currentCard = 0;\r\n");
      out.write("\r\n");
      out.write("        // Hàm tạo thẻ Flashcard\r\n");
      out.write("        function createFlashcard(front, back) {\r\n");
      out.write("            const flashcard = document.createElement('div');\r\n");
      out.write("            flashcard.classList.add('flashcard');\r\n");
      out.write("\r\n");
      out.write("            const frontDiv = document.createElement('div');\r\n");
      out.write("            frontDiv.classList.add('front');\r\n");
      out.write("            frontDiv.textContent = front;\r\n");
      out.write("\r\n");
      out.write("            const backDiv = document.createElement('div');\r\n");
      out.write("            backDiv.classList.add('back');\r\n");
      out.write("            backDiv.textContent = back;\r\n");
      out.write("\r\n");
      out.write("            flashcard.appendChild(frontDiv);\r\n");
      out.write("            flashcard.appendChild(backDiv);\r\n");
      out.write("\r\n");
      out.write("            return flashcard;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Hàm tải dữ liệu của thẻ Flashcard từ HTML\r\n");
      out.write("        function loadFlashcards() {\r\n");
      out.write("            const flashcardData = Array.from(flashcardDataContainer.children).map(card => ({\r\n");
      out.write("                front: card.getAttribute('data-front'),\r\n");
      out.write("                back: card.getAttribute('data-back')\r\n");
      out.write("            }));\r\n");
      out.write("\r\n");
      out.write("            const currentFlashcard = flashcardData[currentCard];\r\n");
      out.write("            flashcard.querySelector('.front').innerText = currentFlashcard.front;\r\n");
      out.write("            flashcard.querySelector('.back').innerText = currentFlashcard.back;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Sự kiện khi nhấp vào thẻ Flashcard để lật nó\r\n");
      out.write("        flashcard.addEventListener('click', () => {\r\n");
      out.write("            flashcard.classList.toggle('flipped');\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Sự kiện khi nhấp vào nút \"Next Card\" để chuyển sang thẻ Flashcard tiếp theo\r\n");
      out.write("        nextBtn.addEventListener('click', () => {\r\n");
      out.write("            currentCard++;\r\n");
      out.write("            if (currentCard >= flashcardDataContainer.children.length) {\r\n");
      out.write("                currentCard = 0; // Quay lại thẻ đầu tiên nếu đã đến cuối\r\n");
      out.write("            }\r\n");
      out.write("            loadFlashcards();\r\n");
      out.write("            flashcard.classList.remove('flipped');\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Tải thẻ flashcard đầu tiên khi trang được tải\r\n");
      out.write("        window.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("            loadFlashcards();\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
